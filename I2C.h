/* Copyright (c) 2005 Solinst Canada Ltd */
/* Generated by XDS Oberon-2 to ANSI C v4.20 translator */

#ifndef I2C_H_
#define I2C_H_

#include "Types.h"

#define ON  (TRUE)
#define OFF (FALSE)

#define I2C_SetDevice(dev) I2C_device = (TCHAR)dev

/* USART 0 Control */
#define I2CEN                  (0x01)         /* I2C enable */
#define MST                    (0x02)         /* I2C master */
#define XA                     (0x10)         /* I2C extended addressing */
#define I2C                    (0x20)         /* USART I2C */
#define TXDMAEN                (0x40)         /* Transmit DMA enable */
#define RXDMAEN                (0x80)         /* Receive DMA enable */

/* I2CTCTL */
#define I2CSTT                 (0x01)         /* Start bit */
#define I2CSTP                 (0x02)         /* Stop bit */
#define I2CSTB                 (0x04)         /* Start byte mode */
#define I2CTRX                 (0x08)         /* Transmit */
#define I2CSSEL0               (0x10)         /* Clock select bit 0 */
#define I2CSSEL1               (0x20)         /* Clock select bit 1 */
#define I2CRM                  (0x40)         /* Repeat mode */
#define I2CWORD                (0x80)         /* Word data mode */

/* I2C Interrupt Flag */
#define ALIFG                  (0x01)         /* Arbitration lost */
#define NACKIFG                (0x02)         /* No acknowledge */
#define OAIFG                  (0x04)         /* Own address */
#define ARDYIFG                (0x08)         /* Access ready (opeation complete) */
#define RXRDYIFG               (0x10)         /* Receive ready (data received) */
#define TXRDYIFG               (0x20)         /* Transmit ready (transmit register empty) */
#define GCIFG                  (0x40)         /* General call */
#define STTIFG                 (0x80)         /* Start condition */

/* I2C Interrupt Enable */
#define ALIE                   (0x01)         /* Arbitration lost */
#define NACKIE                 (0x02)         /* No acknowledge */
#define OAIE                   (0x04)         /* Own address */
#define ARDYIE                 (0x08)         /* Access ready (opeation complete) */
#define RXRDYIE                (0x10)         /* Receive ready (data received) */
#define TXRDYIE                (0x20)         /* Transmit ready (transmit register empty) */
#define GCIE                   (0x40)         /* General call */
#define STTIE                  (0x80)         /* Start condition */

#define I2C_VCTR		0xFFF0	      /* This vector is wrong in the include file */

//extern TCHAR I2C_device;
//extern TCHAR * I2C_RxBuf;
//extern TCHAR * I2C_TxBuf;

extern void I2C_Power(BOOLEAN TurnOn, BOOLEAN Count);
/* Memory power control.  ON turns memory power on; OFF turns memory power off. 
   Count = TRUE, enables automatic counting mode; otherwise, CPU counts bytes. */

extern BOOLEAN I2C_Device_Present(void);
/* Return TRUE iff the active device (I2C_device) is currently connected to the 
   I2C bus and responding with ACKs; otherwise, return FALSE. */

extern BOOLEAN I2C_Send(LONGINT adr, TCHAR byte);
/* Transmit a byte 'b'. */

extern void I2C_SendBuf(LONGINT adr, TCHAR * buf, CARDINAL size);
/* Transmit the contents of buffer 'buf'. */

extern TCHAR I2C_Get(LONGINT adr);
/* Receive a byte 'b'. */

//extern BOOLEAN I2C_GetAck(void);
///* Receive a byte 'b'. */

extern void I2C_GetBuf(LONGINT adr, TCHAR * buf, CARDINAL size);
/* Receive the contents of buffer 'buf'. */


extern void I2C_BEGIN(void);


#endif /* I2C_H_ */
